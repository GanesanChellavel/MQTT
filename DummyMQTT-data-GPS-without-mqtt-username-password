DummyMQTT-data-GPS-without-mqtt-username-password-----esp8266,32
-----------------------------------------------------------------
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

// Replace these with your network and MQTT broker credentials
const char* ssid = "MURNANE";
const char* password = "Tenant@SgWX";
const char* mqtt_server = "test.mosquitto.org";
const int mqtt_port = 1883; // or 8883 for secure MQTT

WiFiClient espClient;
PubSubClient client(espClient);
const char* device = "555555"; // Your device ID

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 19800, 60000); // UTC+5:30 offset for India (19800 seconds)

// Function to calculate date components from epoch time
void epochToDateTime(unsigned long epoch, int& year, int& month, int& day, int& hour, int& minute, int& second) {
  const int secondsPerMinute = 60;
  const int secondsPerHour = 3600;
  const int secondsPerDay = 86400;

  epoch += 19800; // Offset for India Standard Time (UTC+5:30)

  // Calculate time
  second = epoch % 60;
  epoch /= 60;
  minute = epoch % 60;
  epoch /= 60;
  hour = epoch % 24;
  epoch /= 24;

  // Calculate date
  unsigned long days = epoch;
  int y = 1970;
  while (true) {
    bool leap = (y % 4 == 0 && (y % 100 != 0 || y % 400 == 0));
    int daysInYear = leap ? 366 : 365;
    if (days >= daysInYear) {
      days -= daysInYear;
      y++;
    } else {
      break;
    }
  }

  year = y;
  int monthDays[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {
    monthDays[1] = 29; // February has 29 days in a leap year
  }

  month = 0;
  while (days >= monthDays[month]) {
    days -= monthDays[month];
    month++;
  }
  month++;
  day = days + 1;
}

// Function to handle WiFi connection
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

// Callback function when a message is received
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

// Function to reconnect to MQTT broker
void reconnect() {
  int retryCount = 0;
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Try connecting to the broker with a unique client ID
    String clientId = "ESP8266Client-" + String(random(0xffff), HEX); // Unique client ID
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      client.publish("chellam/aws/555555", "hello world");
      client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      retryCount++;
      if (retryCount > 5) {
        Serial.println("Failed to connect after multiple attempts, exiting.");
        break;
      }
      delay(5000); // Retry after 5 seconds
    }
  }
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  timeClient.begin(); // Start NTP client
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  timeClient.update(); // Update NTP time
  unsigned long epoch_time = timeClient.getEpochTime(); // Get current epoch time for India

  int year, month, day, hour, minute, second;
  epochToDateTime(epoch_time, year, month, day, hour, minute, second);

  // Publish a message every 5 seconds
  static unsigned long lastPublishTime = 0;
  unsigned long currentMillis = millis();
  if (currentMillis - lastPublishTime >= 5000) {
    lastPublishTime = currentMillis;

    // Create a JSON document
    StaticJsonDocument<512> doc;
    doc["device"] = device;
    doc["time"] = epoch_time; // Use real-time epoch for India
    doc["date"] = String(year) + "-" + String(month) + "-" + String(day); // Add date in YYYY-MM-DD format
    doc["temperature"] = random(-20, 70); // Random temperature between -20 and 70
    doc["Speed"] = random(0, 1000);
    doc["latitude"] = random(8000, 37000) / 1000.0; // Latitude within India (8.0째 N to 37.0째 N)
    doc["longitude"] = random(68000, 97000) / 1000.0; // Longitude within India (68.0째 E to 97.0째 E)

    char jsonBuffer[512];
    serializeJson(doc, jsonBuffer);

    client.publish("chellam/aws/555555", jsonBuffer);
    Serial.println("Message published: ");
    Serial.println(jsonBuffer);
  }
}
