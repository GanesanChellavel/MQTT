#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

// Replace these with your network and MQTT broker credentials
const char* ssid = "MURNANE";
const char* password = "Tenant@SgWX";
const char* mqtt_server = "test.........sal....mqtt.";
const int mqtt_port = 1883; // or 8883 for secure MQTT
const char* mqtt_user = "aws";
const char* mqtt_password = "aws@1234";

WiFiClient espClient;
PubSubClient client(espClient);

const char* device_id = "ESP_555555"; // Your device ID

// Function to handle WiFi connection
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

// Callback function when a message is received
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

// Function to reconnect to MQTT broker
void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP8266Client", mqtt_user, mqtt_password)) {
      Serial.println("connected");
      // Once connected, publish an announcement
      client.publish("sal/aws/555555", "hello world");
      // ... and subscribe to a topic
      client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Publish a message every 5 seconds
  static unsigned long lastPublishTime = 0;
  unsigned long currentMillis = millis();
  if (currentMillis - lastPublishTime >= 5000) {
    lastPublishTime = currentMillis;

    // Create a JSON document
    StaticJsonDocument<300> doc;
    doc["device_id"] = device_id;
    doc["temperature"] = random(20, 30); // Random temperature between 20 and 30
    doc["Level"] = random(0, 1000); 
    char jsonBuffer[512];
    serializeJson(doc, jsonBuffer);

    client.publish("sal/aws/555555", jsonBuffer);
    Serial.println("Message published: ");
    Serial.println(jsonBuffer);
  }
}
